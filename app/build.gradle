plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.foodie"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // https://developer.android.com/training/data-storage/room/migrating-db-versions#groovy
        // following 5 lines tells Room to export our database schema to JSON file in the project directory, inside the app module inside a new directory named "schemas"
        // The exported JSON files represent your database's schema history. You should store these files in your version control system, as it allows Room to create older versions of the database for testing purposes.
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // Reading local.properties in Kotlin DSL and making it accessible through BuildConfig.
        // Don't forget to  import import java.io.File &  import java.io.FileInputStream & import java.util.*
        // val properties = Properties().apply {load(FileInputStream(File(rootProject.rootDir, "local.properties")))}
        // or
        // val properties = Properties()
        // properties.load(FileInputStream(rootProject.file("local.properties")))
        // buildConfigField("String", "API_KEY", "\"${properties.getProperty("API_KEY")}\"")

        // Reading local.properties in Groovy DSL and making it accessible through BuildConfig
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        buildConfigField "String", "API_KEY", "\"${properties.getProperty("API_KEY")}\""

        // making it accessible through a resource string file - read it via context.getString(R.string.API_KEY)
        //resValue ("string", "API_KEY", properties.getProperty("API_KEY"))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Navigation Component
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.2'

    // Room components for caching data in a local database
    implementation "androidx.room:room-runtime:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"
    implementation "androidx.room:room-ktx:2.4.2"
    androidTestImplementation "androidx.room:room-testing:2.4.2"

    // DataStore for data storage solution that allows you to store key-value pairs
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // Retrofit for networking
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Logging Interceptor to log HTTP requests/responses
    implementation("com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2")

    // Dagger - Hilt for dependency injection
    implementation "com.google.dagger:hilt-android:2.42"
    kapt "com.google.dagger:hilt-android-compiler:2.42"

    // Coroutines for background threading
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'

    // Lifecycle for lifecycle-aware architecture components like ViewModels and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"

    // Coil for image-loading over networks
    implementation "io.coil-kt:coil:1.3.2"

    // Gson for serialization - we could replace this with Kotlinx serialization later
    implementation 'com.google.code.gson:gson:2.9.0'

    // Shimmer for shimmering effect over loading items
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    // Jsoup for parsing HTML tags from our device's web browser
    implementation 'org.jsoup:jsoup:1.13.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}